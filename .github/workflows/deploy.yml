# XO Game - Complete CI/CD Pipeline
name: Deploy XO Game to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 --name test-container ${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container
        docker rm test-container

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/shared-storage.yaml
        kubectl apply -f k8s/postgres-cluster-deployment.yaml
        kubectl apply -f k8s/postgres-cluster-service.yaml
        kubectl apply -f k8s/stress-test-deployment.yaml
        kubectl apply -f k8s/stress-test-service.yaml
        kubectl apply -f k8s/hpa.yaml

    - name: Run staging tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=xo-game,test=stress --timeout=300s -n xo-game
        ./k8s/simple-stress-test.sh

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/shared-storage.yaml
        kubectl apply -f k8s/postgres-cluster-deployment.yaml
        kubectl apply -f k8s/postgres-cluster-service.yaml
        kubectl apply -f k8s/stress-test-deployment.yaml
        kubectl apply -f k8s/stress-test-service.yaml
        kubectl apply -f k8s/hpa.yaml

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=xo-game,test=stress --timeout=300s -n xo-game
        kubectl get pods -n xo-game
        kubectl get services -n xo-game
        kubectl get hpa -n xo-game

    - name: Run production smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        SERVICE_IP=$(kubectl get service xo-game-stress-test-service -n xo-game -o jsonpath='{.spec.clusterIP}')
        curl -f http://$SERVICE_IP:8080/health || exit 1

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Run performance tests
      run: |
        export KUBECONFIG=kubeconfig
        ./k8s/load-test.sh

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
