name: 3-Stage CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images with Compose
        run: docker-compose build

      - name: Tag app image for GHCR
        run: |
          docker tag xo-game_app ghcr.io/${{ github.repository_owner }}/xo-game-app:latest

      - name: Push app image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/xo-game-app:latest

  test:
    name: Integration & Unit Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: xo_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and Start stack
        run: docker-compose up -d --build

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:4000/api/health; then
              echo "App is up!"; break
            fi
            sleep 2
          done

      - name: Run tests in app container
        run: docker-compose exec -T app npm test

      - name: Shut down stack
        run: docker-compose down

  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add your deployment steps here (example placeholder)
      - name: Deploy (placeholder)
        run: echo "Deploying application..."


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images with Compose
        run: docker-compose build

  test:
    name: Integration & Unit Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: xo_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and Start stack
        run: docker-compose up -d --build

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:4000/api/health; then
              echo "App is up!"; break
            fi
            sleep 2
          done

      - name: Run tests in app container
        run: docker-compose exec -T app npm test

      - name: Shut down stack
        run: docker-compose down

  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add your deployment steps here (example placeholder)
      - name: Deploy (placeholder)
        run: echo "Deploying application..."



on:
 push:
   branches: [ main ]
 pull_request:
   branches: [ main ]
 workflow_dispatch:


jobs:
 build:
   name: Build Stage
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4


     - uses: actions/setup-node@v4
       with:
         node-version: '18'
         cache: 'npm'


     - name: Install dependencies
       run: npm ci


     - name: Build application
       run: |
         mkdir -p dist
          cp -r public dist/
          cp server.js dist/
          cp package.json dist/
          cp package-lock.json dist/
          cd dist && npm ci --only=production


 test:
   name: Test Stage
   runs-on: ubuntu-latest
   needs: build
   steps:
     - uses: actions/checkout@v4


     - uses: actions/setup-node@v4
       with:
         node-version: '18'
         cache: 'npm'


     - name: Install dependencies
       run: npm ci


     - name: Run tests
       run: npm test


     - name: Start server in background
       run: |
         npm start &
          sleep 5


     - name: Health check with retries
       run: |
         for i in {1..10}; do
          curl -f http://localhost:3000/health && break
          echo "Waiting for server to be ready..."
          sleep 2
          done


     - name: Stop background server (optional)
       run: |
         pkill -f "node" || true


 deploy:
   name: Deploy to Render
   runs-on: ubuntu-latest
   needs: test
   if: github.ref == 'refs/heads/main'
   steps:
     - name: Trigger Render Deploy Hook
       run: curl -X POST "$RENDER_DEPLOY_HOOK"
       env:
         RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}



