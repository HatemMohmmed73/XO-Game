name: Node.js CI/CD with Docker Compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker images with Compose
      run: docker-compose build

    - name: Find and push built image
      run: |
        # List all images for debugging
        echo "=== All Docker images ==="
        docker images -a

        # Get repository name from GitHub context (lowercase)
        REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
        
        # Find the most recently created image that's not a base image
        IMAGE_ID=$(docker images --format "{{.ID}} {{.CreatedAt}}" | sort -k 2 -r | head -n 1 | cut -d' ' -f1)
        
        if [ -z "$IMAGE_ID" ]; then
          echo "Error: No Docker images found after build!"
          exit 1
        fi

        # Get the repository and tag for the image
        IMAGE_INFO=$(docker inspect --format='{{.RepoTags}}' $IMAGE_ID 2>/dev/null || echo "")
        
        if [ -n "$IMAGE_INFO" ] && [ "$IMAGE_INFO" != "[]" ]; then
          # If image has a tag, use it
          SOURCE_IMAGE=$(echo $IMAGE_INFO | tr -d '[]' | awk '{print $1}')
        else
          # If image is untagged, create a temporary tag
          SOURCE_IMAGE="$REPO_NAME-temp:latest"
          docker tag $IMAGE_ID $SOURCE_IMAGE
        fi

        # Construct target image name
        TARGET_IMAGE="ghcr.io/$REPO_OWNER/$REPO_NAME:latest"
        
        echo "Tagging $SOURCE_IMAGE as $TARGET_IMAGE"
        docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
        docker push "$TARGET_IMAGE"
        
        # Clean up temporary tag if we created one
        if [ "$SOURCE_IMAGE" = "$REPO_NAME-temp:latest" ]; then
          docker rmi $SOURCE_IMAGE
        fi

  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: npm ci
    - run: npm test

  deploy:
    needs: [build-and-push, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add your deployment commands here