name: 3-Stage CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images with Compose
        run: docker-compose build

      - name: List Docker images to verify built image name
        run: docker images

      - name: Tag and push app image to GHCR
        run: |
          # Get repository name from GitHub context
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          
          # Get the first non-db service from docker-compose
          SERVICE_NAME=$(docker-compose config --services | grep -v 'db' | grep -v 'postgres' | head -n 1)
          
          # If no specific service found, use 'app' as default
          if [ -z "$SERVICE_NAME" ]; then
            SERVICE_NAME="app"
          fi
          
          # Get project name (directory name, lowercased, hyphens to underscores)
          PROJECT_NAME=$(basename $(pwd) | tr '[:upper:]' '[:lower:]' | tr '-' '_')
          
          # Construct source and target image names
          SOURCE_IMAGE=${PROJECT_NAME}_${SERVICE_NAME}:latest
          TARGET_IMAGE=ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/${REPO_NAME}:latest
          
          # Tag and push the image
          echo "Tagging $SOURCE_IMAGE as $TARGET_IMAGE"
          docker tag $SOURCE_IMAGE $TARGET_IMAGE
          docker push $TARGET_IMAGE

  test:
    name: Integration & Unit Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: xo_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and Start stack
        run: docker-compose up -d --build

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:4000/api/health; then
              echo "App is up!"; break
            fi
            sleep 2
          done

      - name: Run tests in app container
        run: docker-compose exec -T app npm test

      - name: Shut down stack
        run: docker-compose down

  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add your deployment steps here (example placeholder)
      - name: Deploy (placeholder)
        run: echo "Deploying application..."
